//
//  LineView.swift
//  SwiftUILineChart
//
//  Created by Anupam Chugh on 05/03/20.
//  Copyright Â© 2020 iowncode. All rights reserved.
//

import SwiftUI

struct LineView: View {
    
    var data: [(Double)]
    var title: String?
    var subtitle: String?

    public init(data: [Double],
                title: String? = nil,
                subtitle: String? = nil) {
        
        self.data = data
        self.title = title
        self.subtitle = subtitle
    }
    
    public var body: some View {
        GeometryReader{ geometry in
            
            VStack(alignment: .leading, spacing: 8) {
                
//                Group{
//                    if (self.title != nil){
//                        Text(self.title!)
//                            .font(.title)
//                    }
//                    if (self.subtitle != nil){
//                        Text(self.subtitle!)
//                            .font(.body)
//                        .offset(x: 5, y: 0)
//                    }
//                }.offset(x: 0, y: 0)
                
                ZStack{
                    GeometryReader{ reader in
                        Line(data: self.data,
                             frame: .constant(CGRect(x: 0, y: 0, width: reader.frame(in: .local).width , height: reader.frame(in: .local).height))
                        )
                            .offset(x: 0, y: 0)
                    }
                    .frame(width: geometry.frame(in: .local).size.width, height: 300)
                    .offset(x: 0, y: -100)

                }
                .frame(width: geometry.frame(in: .local).size.width, height: 300)
                
        
            }
        }
    }
}

struct LineView_Previews: PreviewProvider {
    static var previews: some View {
        LineView(data: [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -0.04830000000000112,
        -0.04830000000000112,
        -0.09659999999999869,
        -0.19320000000000093,
        -0.2414999999999985,
        -0.2897999999999996,
        -0.3863999999999983,
        -0.4346999999999994,
        -0.5795999999999992,
        -0.6761999999999979,
        -0.7728000000000002,
        -0.8693999999999988,
        -0.9177,
        -0.9660000000000011,
        -1.0142999999999986,
        -1.1109000000000009,
        -1.1591999999999985,
        -1.2074999999999996,
        -1.2074999999999996,
        -1.2558000000000007,
        -1.2558000000000007,
        -1.2558000000000007,
        -1.2558000000000007,
        -1.2558000000000007,
        -1.2558000000000007,
        -1.2558000000000007,
        -1.2074999999999996,
        -1.2074999999999996,
        -1.1591999999999985,
        -1.1109000000000009,
        -1.0625999999999998,
        -0.9660000000000011,
        -0.9177,
        -0.8211000000000013,
        -0.724499999999999,
        -0.6279000000000003,
        -0.5312999999999981,
        -0.4346999999999994,
        -0.33810000000000073,
        -0.2897999999999996,
        -0.2414999999999985,
        -0.19320000000000093,
        -0.1448999999999998,
        -0.1448999999999998,
        -0.1448999999999998,
        -0.1448999999999998,
        -0.1448999999999998,
        -0.09659999999999869,
        -0.04830000000000112,
        -0.04830000000000112,
        -0.04830000000000112,
        -0.04830000000000112,
        -0.04830000000000112,
        0,
        0,
        0,
        0,
        0,
        0,
        0.04830000000000112,
        0.04830000000000112,
        0,
        0,
        0,
        0,
        0.04830000000000112,
        0,
        0,
        0,
        0.04830000000000112,
        0,
        0,
        0.04830000000000112,
        0,
        0.04830000000000112,
        0,
        0.04830000000000112,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.04830000000000112,
        0,
        0.04830000000000112,
        0,
        0.04830000000000112,
        0,
        0.04830000000000112,
        0.09660000000000224,
        0.09660000000000224,
        0.1448999999999998,
        0.19320000000000093,
        0.24150000000000205,
        0.2897999999999996,
        0.38640000000000185,
        0.2897999999999996,
        0.19320000000000093,
        -0.4346999999999994,
        -0.6761999999999979,
        -1.5456000000000003,
        -2.5115999999999996,
        -3.6225000000000005,
        -3.8156999999999996,
        -4.878299999999999,
        -5.8926,
        -6.5205,
        -6.6654,
        -6.8103,
        -6.617100000000001,
        -7.6797,
        -7.728,
        -6.6654,
        -6.713699999999999,
        -6.5205,
        -5.6028,
        -5.168099999999999,
        -3.863999999999999,
        -2.559899999999999,
        -1.6905000000000001,
        -1.1109000000000009,
        -0.6761999999999979,
        0.04830000000000112,
        0.33810000000000073,
        0.4346999999999994,
        0.48300000000000054,
        0.5313000000000017,
        0.5313000000000017,
        0.5313000000000017,
        0.48300000000000054,
        0.5313000000000017,
        0.48300000000000054,
        0.48300000000000054,
        0.48300000000000054,
        0.48300000000000054,
        0.48300000000000054,
        0.4346999999999994,
        0.38640000000000185,
        0.38640000000000185,
        0.38640000000000185,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.2897999999999996,
        0.2897999999999996,
        0.33810000000000073,
        0.2897999999999996,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.2897999999999996,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.33810000000000073,
        0.2897999999999996,
        0.2897999999999996,
        0.2897999999999996,
        0.24150000000000205,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.1448999999999998,
        0.09660000000000224,
        0.04830000000000112,
        -0.09659999999999869,
        -0.19320000000000093,
        -0.2414999999999985,
        -0.2897999999999996,
        -0.48300000000000054,
        -0.5795999999999992,
        -0.6279000000000003,
        -0.6761999999999979,
        -0.8211000000000013,
        -0.8693999999999988,
        -0.8211000000000013,
        -1.0142999999999986,
        -0.8693999999999988,
        -0.8211000000000013,
        -1.2074999999999996,
        -1.3040999999999983,
        -1.3523999999999994,
        -1.4007000000000005,
        -1.4972999999999992,
        -1.5456000000000003,
        -1.642199999999999,
        -1.6905000000000001,
        -1.7388000000000012,
        -1.8354,
        -1.9319999999999986,
        -1.9802999999999997,
        -2.0768999999999984,
        -2.1251999999999995,
        -2.1735000000000007,
        -2.2700999999999993,
        -2.3184000000000005,
        -2.3184000000000005,
        -2.3667,
        -2.414999999999999,
        -2.4633000000000003,
        -2.4633000000000003,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.559899999999999,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.559899999999999,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.5115999999999996,
        -2.4633000000000003,
        -2.4633000000000003,
        -2.3667,
        -2.3184000000000005,
        -2.2700999999999993,
        -2.1735000000000007,
        -2.028600000000001,
        -1.9802999999999997,
        -1.883700000000001,
        -1.7870999999999988,
        -1.6905000000000001,
        -1.5938999999999979,
        -1.4972999999999992,
        -1.4007000000000005,
        -1.3523999999999994,
        -1.2558000000000007,
        -1.0625999999999998,
        -1.0142999999999986,
        -0.9177,
        -0.724499999999999,
        -0.6761999999999979,
        -0.5795999999999992,
        -0.48300000000000054,
        -0.3863999999999983,
        -0.2897999999999996,
        -0.2414999999999985,
        -0.1448999999999998,
        -0.09659999999999869,
        -0.04830000000000112,
        0,
        0,
        0.04830000000000112,
        0.04830000000000112,
        0.09660000000000224,
        0.09660000000000224,
        0.09660000000000224,
        0.1448999999999998,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093,
        0.19320000000000093], title: "Full chart")
    }
}

struct Line: View {
    var data: [(Double)]
    @Binding var frame: CGRect

    let padding:CGFloat = 30
    
    var stepWidth: CGFloat {
        if data.count < 2 {
            return 0
        }
        return frame.size.width / CGFloat(data.count-1)
    }
    var stepHeight: CGFloat {
        var min: Double?
        var max: Double?
        let points = self.data
        if let minPoint = points.min(), let maxPoint = points.max(), minPoint != maxPoint {
            min = minPoint
            max = maxPoint
        }else {
            return 0
        }
        if let min = min, let max = max, min != max {
            if (min <= 0){
                return (frame.size.height-padding) / CGFloat(max - min)
            }else{
                return (frame.size.height-padding) / CGFloat(max + min)
            }
        }
        
        return 0
    }
    var path: Path {
        let points = self.data
        return Path.lineChart(points: points, step: CGPoint(x: stepWidth, y: stepHeight))
    }
    
    public var body: some View {
        
        ZStack {

            self.path
                .stroke(Color(#colorLiteral(red: 0.8352941176, green: 0, blue: 0.1882352941, alpha: 1)) ,style: StrokeStyle(lineWidth: 1, lineCap: .round, lineJoin: .round, miterLimit: 10, dash: [], dashPhase: 0))
                .rotationEffect(.degrees(180), anchor: .center)
                .rotation3DEffect(.degrees(180), axis: (x: 0, y: 1, z: 0))
                .drawingGroup()
        }
    }
}

extension Path {
    
    static func lineChart(points:[Double], step:CGPoint) -> Path {
        var path = Path()
        if (points.count < 2){
            return path
        }
        guard let offset = points.min() else { return path }
        let p1 = CGPoint(x: 0, y: CGFloat(points[0]-offset)*step.y)
        path.move(to: p1)
        for pointIndex in 1..<points.count {
            let p2 = CGPoint(x: step.x * CGFloat(pointIndex), y: step.y*CGFloat(points[pointIndex]-offset))
            path.addLine(to: p2)
        }
        return path
    }
}
